# Only run against master
trigger:
  - master

# Don't run against PRs
pr: none

variables:
  WebApp_BuildConfiguration: Release
  WebApp_OutputFolder: $(Build.ArtifactStagingDirectory)/WebApp
  WebApp_ProjectDirectory: $(Build.SourcesDirectory)/src/$(WebApp_ProjectName)
  WebApp_ProjectFile: $(WebApp_ProjectDirectory)/$(WebApp_ProjectName).csproj
  WebApp_ProjectName: MinecraftServer.Web

stages:
  # Download and build the project
  - stage: Build
    displayName: Build
    jobs:
      - job: run_build
        pool:
          vmImage: "windows-latest"
        variables:
          - group: MinecraftServer_Variables_Shared

        steps:

          ## Run the dotnet build/publish
          - script: |
              dotnet publish $(WebApp_ProjectFile) --configuration $(WebApp_BuildConfiguration) --output $(WebApp_OutputFolder)
            displayName: Publish dotnet web app

          - task: CopyFiles@2
            displayName: Copy ARM template
            inputs:
              contents: $(Build.SourcesDirectory)/azure-deploy.json
              targetFolder: $(Build.ArtifactStagingDirectory)

          ## Archive the files into a zip file for publishing
          - task: ArchiveFiles@2
            displayName: Zip build artifacts
            inputs:
              rootFolderOrFile: $(WebApp_OutputFolder)
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/Web.zip"
              includeRootFolder: false

          ## Publish the zip file
          - task: PublishBuildArtifacts@1
            displayName: Publish build artifacts
            inputs:
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
              artifactName: drop

  # Deploy the resources
  - stage: DeployResourceGroup
    displayName: Deploy Resource Group
    dependsOn: Build
    condition: succeeded()
    jobs:
    - deployment: Arm
      displayName: Deploy Resource Group
      pool:
        vmImage: 'windows-latest'
      environment: 'production'
      variables:
        - group: MinecraftServer_Variables_Shared
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureResourceGroupDeployment@2
              displayName: 'ARM deployment'
              inputs:
                azureSubscription: '$(AzureSubscription)'
                resourceGroupName: $(ResourceGroup_Name)
                location: '$(ResourceGroup_Location)'
                csmFile: $(Pipeline.Workspace)/drop/azure-deploy.json
                deploymentMode: 'Incremental'
                overrideParameters: >-
                  -adminPasswordOrKey "$(Authentication_PublicKey)"
                  -adminUsername "$(Authentication_UserName)"
                  -appServiceName "$(WebApp_SiteName)"
                  -appServicePlanName "$(AppServicePlan_Name)"
                  -dnsNameForPublicIP "$(VirtualMachine_DnsName)"

  # Deploy the resources and application
  - stage: Production
    dependsOn:
    - Build
    - DeployResourceGroup
    condition: succeeded()
    displayName: Production
    jobs:
    - deployment: Production
      displayName: Deploy Resource Group
      pool:
        vmImage: 'windows-latest'
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureRmWebAppDeployment@4
              displayName: 'Deploy web app'
              inputs:
                azureSubscription: '$(AzureSubscription)'
                WebAppName: $(WebApp_SiteName)
                packageForLinux: '$(Pipeline.Workspace)/drop/Web.zip'
